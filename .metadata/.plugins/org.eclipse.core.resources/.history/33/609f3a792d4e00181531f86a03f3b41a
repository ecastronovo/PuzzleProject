package puzzle2;

import java.awt.*;
//import java.awt.BorderLayout;
//import java.awt.Color;
//import java.awt.EventQueue;
//import java.awt.Graphics2D;
//import java.awt.GridLayout;
//import java.awt.Image;
//import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.awt.image.CropImageFilter;
import java.awt.image.FilteredImageSource;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

import javax.swing.*;



class MyButton extends JButton {
	

    private boolean isLastButton;

    public MyButton() {

        super();

        initUI();
    }

    public MyButton(Image image) {

        super(new ImageIcon(image));

        initUI();
    }

    private void initUI() {

        isLastButton = false;
        
        
        BorderFactory.createLineBorder(Color.green);

        addMouseListener(new MouseAdapter() {

            @Override
            public void mouseEntered(MouseEvent e) {
                setBorder(BorderFactory.createLineBorder(Color.yellow));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                setBorder(BorderFactory.createLineBorder(Color.green));
            }
        });
    }

    public void setLastButton() {
        
        isLastButton = true;
    }

    public boolean isLastButton() {

        return isLastButton;
    }
}

public class Puzzle2 extends JFrame {

    private JPanel panel;
    private BufferedImage source;
    private BufferedImage resized;    
    private Image image;
    private MyButton lastButton;
    private int width, height;    
    
    private List<MyButton> buttons;
    private List<Point> solution;

    //private final int NUMBER_OF_BUTTONS = 9;
    private final int DESIRED_WIDTH = 300;
    
    public boolean firstClick = false;
    public int lastClicked = 0;
    public boolean isFinished = false;

    public Puzzle2(int HEIGHT,int WIDTH, String S) {

        initUI(HEIGHT,WIDTH,S);
    }

    private void initUI(int HEIGHT, int WIDTH, String S) {

        solution = new ArrayList<>();
        
        for(int i = 0; i < HEIGHT; i++)
        	for(int j = 0; j < WIDTH; j ++) {
        		solution.add(new Point(i, j));
        		
        	}
        
       // solution.add(new Point(0, 0));
       // solution.add(new Point(0, 1));
       // solution.add(new Point(0, 2));
       // solution.add(new Point(1, 0));
       // solution.add(new Point(1, 1));
       // solution.add(new Point(1, 2));
       // solution.add(new Point(2, 0));
       // solution.add(new Point(2, 1));
       // solution.add(new Point(2, 2));
        //solution.add(new Point(3, 0));
        //solution.add(new Point(3, 1));
        //solution.add(new Point(3, 2));

        buttons = new ArrayList<>();

        panel = new JPanel();
        panel.setBorder(BorderFactory.createLineBorder(Color.gray));
        panel.setLayout(new GridLayout(HEIGHT, WIDTH, 0, 0));

        try {
            source = loadImage(S);
            int h = getNewHeight(source.getWidth(), source.getHeight());
            resized = resizeImage(source, DESIRED_WIDTH, h,
                    BufferedImage.TYPE_INT_ARGB);

        } catch (IOException ex) {
            Logger.getLogger(Puzzle2.class.getName()).log(
                    Level.SEVERE, null, ex);
        }

        width = resized.getWidth(null);
        height = resized.getHeight(null);

        add(panel, BorderLayout.CENTER);

        for (int i = 0; i < HEIGHT; i++) {

            for (int j = 0; j < WIDTH; j++) {

                image = createImage(new FilteredImageSource(resized.getSource(),
                        new CropImageFilter(j * width / WIDTH, i * height / HEIGHT,
                                (width / WIDTH), height / HEIGHT)));
                
                MyButton button = new MyButton(image);
                button.putClientProperty("position", new Point(i, j));

               // if (i == 2 && j == 2) {
               //     lastButton = new MyButton();
                   // lastButton.setBorderPainted(false);
                   // lastButton.setContentAreaFilled(false);
                    //lastButton.setLastButton();
                    //lastButton.putClientProperty("position", new Point(i, j));
               // } else {
                    buttons.add(button);
               // }
            }
        }

        Collections.shuffle(buttons);
        //buttons.add(lastButton);
        int NUMBER_OF_BUTTONS = WIDTH * HEIGHT;
        for (int i = 0; i < NUMBER_OF_BUTTONS; i++) {

            MyButton btn = buttons.get(i);
            panel.add(btn);
            btn.setBorder(BorderFactory.createLineBorder(Color.gray));
            btn.addActionListener(new ClickAction());
        }

        pack();
        setTitle("Puzzle" + HEIGHT + "by" + WIDTH);
        setResizable(false);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    private int getNewHeight(int w, int h) {

        double ratio = DESIRED_WIDTH / (double) w;
        int newHeight = (int) (h * ratio);
        return newHeight;
    }

    private BufferedImage loadImage(String S) throws IOException {

        BufferedImage bimg = ImageIO.read(new File("src/"+S+".jpg"));

        return bimg;
    }

    private BufferedImage resizeImage(BufferedImage originalImage, int width,
            int height, int type) throws IOException {

        BufferedImage resizedImage = new BufferedImage(width, height, type);
        Graphics2D g = resizedImage.createGraphics();
        g.drawImage(originalImage, 0, 0, width, height, null);
        g.dispose();

        return resizedImage;
    }

    private class ClickAction extends AbstractAction {
    	

        @Override
        public void actionPerformed(ActionEvent e) {
        	
            checkButton(e);
            checkSolution();
        }

        private void checkButton(ActionEvent e) {
        	
            int lidx = 0;
            System.out.println("Beginning firstClick = "+ firstClick);
            System.out.println("Beginning lastClicked = "+ lastClicked);
            for (MyButton button : buttons) {
                if (button.isLastButton()) {
                    lidx = buttons.indexOf(button);
                }
            }

            JButton button = (JButton) e.getSource();
            int bidx = buttons.indexOf(button);
            
            

           // if ((bidx - 1 == lidx) || (bidx + 1 == lidx)
           //         || (bidx - 3 == lidx) || (bidx + 3 == lidx)) {
            
            	if(firstClick == true) {
	                System.out.println("Middle firstClick = "+ firstClick);
	                System.out.println("Middle lastClicked = "+ lastClicked);
	                Collections.swap(buttons, bidx, lastClicked);
	                firstClick = false;
	                updateButtons();
	                System.out.println("MiddleE firstClick = "+ firstClick);
	                System.out.println("MiddleE lastClicked = "+ lastClicked);
	                
	                return;
            }
            else {
            	 firstClick = true;
            	 System.out.println("Middle2 firstClick = "+ firstClick);
                 System.out.println("Middle2 lastClicked = "+ lastClicked);
            }
            lastClicked = bidx;
            System.out.println("Ending firstClick = "+ firstClick);
            System.out.println("Ending lastClicked = "+ lastClicked);
            }
        
        }

        private void updateButtons() {

            panel.removeAll();

            for (JComponent btn : buttons) {

                panel.add(btn);
            }

            panel.validate();
        }
    

    private void checkSolution() {

        List<Point> current = new ArrayList<>();

        for (JComponent btn : buttons) {
            current.add((Point) btn.getClientProperty("position"));
        }

        if (compareList(solution, current)) {
            JOptionPane.showMessageDialog(panel, "Finished",
                    "Congratulation", JOptionPane.INFORMATION_MESSAGE);
            		//
        }
    }

    public static boolean compareList(List ls1, List ls2) {
        
    	System.out.println("ls1 = "+ ls1.toString());
    	System.out.println("ls2 = "+ ls2.toString());
        return ls1.toString().contentEquals(ls2.toString());
    }
    

    public static void main(String[] args) {
    	

        EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
            	  
                Puzzle2 puzzle2x2 = new Puzzle2(2,2,"dolphin");
                puzzle2x2.setVisible(true);
                
                Puzzle2 puzzle3x3 = new Puzzle2(3,3,"Nasa");
                puzzle3x3.setVisible(true);
                
                Puzzle2 puzzle = new Puzzle2(4,3,"cow");
                puzzle.setVisible(true);
            }
        });
    }
}